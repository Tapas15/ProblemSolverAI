import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { getUserCertificates, getUserAchievements, issueFrameworkCertificate } from '@/lib/api';
import { UserProgress, Framework, Certificate } from '@shared/schema';
import { queryClient, apiRequest } from '@/lib/queryClient';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Award, FileText, Medal, Trophy, Download, Loader2, InfoIcon } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { CertificateFrame } from '@/components/certificate/certificate-frame';
import { AchievementCard } from '@/components/certificate/achievement-card';
import { SwotCertificateExample } from '@/components/certificate/swot-certificate-example';

export default function CertificatesPage() {
  const [activeTab, setActiveTab] = useState('certificates');
  const { toast } = useToast();
  
  // Get user certificates
  const {
    data: certificates,
    isLoading: certificatesLoading,
    error: certificatesError
  } = useQuery({
    queryKey: ['/api/certificates'],
    queryFn: getUserCertificates
  });
  
  // Get user achievements
  const {
    data: achievements,
    isLoading: achievementsLoading,
    error: achievementsError
  } = useQuery({
    queryKey: ['user-achievements'],
    queryFn: getUserAchievements
  });
  
  const handleDownloadCertificate = async (id: number) => {
    toast({
      title: "Download Started",
      description: "Your certificate will be downloaded shortly.",
    });
    
    try {
      const downloadUrl = `/api/certificates/${id}/download`;
      
      // Use fetch with credentials to handle authentication
      const response = await fetch(downloadUrl, {
        method: 'GET',
        credentials: 'include', // This ensures cookies are sent with the request
      });
      
      if (!response.ok) {
        throw new Error(`Download failed with status: ${response.status}`);
      }
      
      // Get the html content
      const htmlContent = await response.text();
      
      // Get the filename from the Content-Disposition header if available
      const contentDisposition = response.headers.get('Content-Disposition');
      let filename = 'FrameworkPro-Certificate.html';
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="(.+?)"/);
        if (filenameMatch && filenameMatch[1]) {
          filename = filenameMatch[1];
        }
      }
      
      // Create a blob from the html content
      const blob = new Blob([htmlContent], { type: 'text/html' });
      
      // Create a link to download the blob
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      
      // Cleanup
      setTimeout(() => {
        document.body.removeChild(a);
        URL.revokeObjectURL(a.href);
      }, 100);
      
      toast({
        title: "Certificate Downloaded",
        description: "Your certificate has been downloaded. You can print it or save it as PDF.",
      });
    } catch (error) {
      console.error('Error downloading certificate:', error);
      toast({
        title: "Download Failed",
        description: "There was an error downloading your certificate. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const { user } = useAuth();
  
  const renderCertificates = () => {
    if (certificatesLoading) {
      return (
        <div className="space-y-8">
          {[1, 2].map((i) => (
            <div key={i} className="w-full">
              <Skeleton className="h-64 w-full rounded-xl" />
            </div>
          ))}
        </div>
      );
    }
    
    if (certificatesError) {
      return (
        <div className="text-center py-10">
          <p className="text-red-500">Error loading certificates</p>
        </div>
      );
    }
    
    if (!certificates || certificates.length === 0) {
      return (
        <div className="text-center py-10">
          <FileText className="h-16 w-16 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-semibold mb-2">No Certificates Yet</h3>
          <p className="text-sm text-gray-500 mb-4">
            Complete frameworks and pass quizzes to earn certificates.
          </p>
          <Button variant="outline" asChild>
            <a href="/frameworks">Explore Frameworks</a>
          </Button>
        </div>
      );
    }
    
    // Sort certificates with newest first, and active certificates before inactive ones
    const sortedCertificates = [...certificates].sort((a, b) => {
      // First sort by status: active certificates first
      if (a.status === 'active' && b.status !== 'active') return -1;
      if (a.status !== 'active' && b.status === 'active') return 1;
      
      // Then sort by issue date (most recent first)
      const dateA = a.issueDate ? new Date(a.issueDate).getTime() : 0;
      const dateB = b.issueDate ? new Date(b.issueDate).getTime() : 0;
      return dateB - dateA;
    });
    
    return (
      <div className="space-y-8">
        {sortedCertificates.map((certificate) => {
          // Check if this is a newly issued certificate
          const isNewlyIssued = localNewCertificates.includes(certificate.frameworkId);
          
          return (
            <div key={certificate.id} className={`relative transition-all ${isNewlyIssued ? 'animate-pulse-once ring-2 ring-primary ring-opacity-60 rounded-xl' : ''}`}>
              {isNewlyIssued && (
                <Badge 
                  variant="default"
                  className="absolute top-3 right-3 z-30 bg-primary text-white"
                >
                  Newly Issued
                </Badge>
              )}
              
              {certificate.status !== 'active' && (
                <Badge 
                  variant={certificate.status === 'expired' ? 'destructive' : 'secondary'}
                  className="absolute top-3 right-3 z-20"
                >
                  {certificate.status === 'expired' ? 'Expired' : 'Revoked'}
                </Badge>
              )}
            
            {/* Extract framework name directly */}
            <CertificateFrame
              title={certificate.title}
              userName={user?.name || ""}
              description={certificate.description}
              certificateNumber={certificate.certificateNumber}
              issueDate={certificate.issueDate ? certificate.issueDate.toString() : null}
              frameworkName={certificate.description.match(/the (.+?) framework/i)?.[1] || "Professional Framework"}
              onDownload={() => {
                console.log("Download button clicked for certificate ID:", certificate.id);
                handleDownloadCertificate(certificate.id);
              }}
            />
          </div>
        ))}
      </div>
    );
  };
  
  const renderAchievements = () => {
    if (achievementsLoading) {
      return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className="flex p-4 border rounded-lg">
              <Skeleton className="h-12 w-12 rounded-full shrink-0" />
              <div className="ml-4 flex-1">
                <Skeleton className="h-5 w-28 mb-2" />
                <Skeleton className="h-4 w-full" />
              </div>
            </div>
          ))}
        </div>
      );
    }
    
    if (achievementsError) {
      return (
        <div className="text-center py-10">
          <p className="text-red-500">Error loading achievements</p>
        </div>
      );
    }
    
    if (!achievements || achievements.length === 0) {
      return (
        <div className="text-center py-10">
          <Trophy className="h-16 w-16 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-semibold mb-2">No Achievements Yet</h3>
          <p className="text-sm text-gray-500 mb-4">
            Start learning to earn achievements and track your progress.
          </p>
          <Button variant="outline" asChild>
            <a href="/frameworks">Start Learning</a>
          </Button>
        </div>
      );
    }
    
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {achievements.map((achievement) => (
          <AchievementCard key={achievement.id} achievement={achievement} />
        ))}
      </div>
    );
  };
  
  // Get user progress and frameworks for issuing certificates
  const { data: userProgress, isLoading: progressLoading } = useQuery({
    queryKey: ['/api/user/progress'],
    queryFn: () => apiRequest('GET', '/api/user/progress').then(res => res.json())
  });

  const { data: frameworks, isLoading: frameworksLoading } = useQuery({
    queryKey: ['/api/frameworks'],
    queryFn: () => apiRequest('GET', '/api/frameworks').then(res => res.json())
  });

  // Track loading state for certificate issuance
  const [issuingCertificate, setIssuingCertificate] = useState<number | null>(null);
  // State to track newly issued certificates before refresh
  const [localNewCertificates, setLocalNewCertificates] = useState<number[]>([]);

  // Function to handle certificate issuance
  const handleIssueCertificate = async (frameworkId: number) => {
    try {
      setIssuingCertificate(frameworkId);
      console.log(`Attempting to issue certificate for framework ID: ${frameworkId}`);
      
      // Get framework to detect Design Thinking specifically
      const framework = frameworks?.find((f: Framework) => f.id === frameworkId);
      
      // Check if this is the Design Thinking framework and show special notice
      if (framework?.name === "Design Thinking") {
        toast({
          title: "Design Thinking Certificate",
          description: "The Design Thinking framework is currently being updated. Please try again in a few minutes or contact support if the issue persists.",
        });
      }
      
      // Check if the user has already completed the framework
      const frameworkProgress = userProgress?.find((p: UserProgress) => p.frameworkId === frameworkId);
      if (!frameworkProgress) {
        toast({
          title: "Certificate Error",
          description: "You must start this framework before you can earn a certificate.",
          variant: "destructive"
        });
        return;
      }
      
      // Check if the certificate already exists
      const existingCert = certificates?.find(
        cert => cert.frameworkId === frameworkId && cert.status === "active"
      );
      
      if (existingCert) {
        toast({
          title: "Certificate Already Exists",
          description: "You already have an active certificate for this framework.",
          variant: "destructive"
        });
        return;
      }
      
      const certificate = await issueFrameworkCertificate(frameworkId);
      
      // Update local state to track newly issued certificates
      setLocalNewCertificates(prev => [...prev, frameworkId]);
      
      // Immediately update the UI with the new certificate without waiting for a refetch
      if (certificate) {
        // Update the query cache directly with the new certificate
        const existingCerts = queryClient.getQueryData<Certificate[]>(['/api/certificates']) || [];
        // If we have existing certs data, append the new certificate to it
        if (Array.isArray(existingCerts)) {
          queryClient.setQueryData<Certificate[]>(
            ['/api/certificates'], 
            [...existingCerts, certificate]
          );
        }

        console.log("Certificate issued successfully:", certificate);
      }
      
      // Force refresh all certificates and user progress in the background
      await Promise.all([
        queryClient.invalidateQueries({
          queryKey: ['/api/certificates'],
        }),
        queryClient.invalidateQueries({
          queryKey: ['/api/user/progress'],
        })
      ]);
      
      // Immediately refetch in the background to ensure data consistency
      queryClient.refetchQueries({
        queryKey: ['/api/certificates'],
        type: 'active'
      });
      
      queryClient.refetchQueries({
        queryKey: ['/api/user/progress'],
        type: 'active'
      });
      
      toast({
        title: "Certificate Issued",
        description: "Your new certificate has been created successfully.",
      });
    } catch (error: any) {
      console.error('Error issuing certificate:', error);
      
      let errorMessage = "Failed to issue certificate. Please try again.";
      if (error.message) {
        if (error.message.includes("already has an active certificate")) {
          errorMessage = "You already have an active certificate for this framework.";
        } else if (error.message.includes("must start the framework")) {
          errorMessage = "You need to start this framework before you can earn a certificate.";
        } else if (frameworks?.find((f: Framework) => f.id === frameworkId)?.name === "Design Thinking") {
          // Special handling for Design Thinking framework
          errorMessage = "The Design Thinking certificate system is currently being updated. Please try again later or contact support if the issue persists.";
        } else {
          errorMessage = error.message;
        }
      }
      
      toast({
        title: "Certificate Error",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setIssuingCertificate(null);
    }
  };

  // Function to render eligible frameworks for certification
  const renderEligibleFrameworks = () => {
    if (progressLoading || frameworksLoading) {
      return <Skeleton className="h-20 w-full" />;
    }

    // Find completed frameworks that don't have certificates yet
    const completedFrameworks: Array<{id: number, name: string}> = [];
    
    if (userProgress && frameworks) {
      // Get frameworks with completed status
      const completedProgress = userProgress.filter((p: UserProgress) => p.status === 'completed');
      
      // For each completed framework, check if a certificate already exists
      for (const progress of completedProgress) {
        const framework = frameworks.find((f: Framework) => f.id === progress.frameworkId);
        
        // Check if user already has a certificate for this framework OR if we just issued one
        const hasCertificate = 
          certificates?.some((c: Certificate) => c.frameworkId === progress.frameworkId && c.status === 'active') ||
          localNewCertificates.includes(progress.frameworkId);
        
        if (framework && !hasCertificate) {
          completedFrameworks.push({
            id: framework.id,
            name: framework.name
          });
        }
      }
    }

    if (completedFrameworks.length === 0) {
      return (
        <div className="text-center py-4 border rounded-lg bg-gray-50">
          <p className="text-sm text-gray-500">
            Complete more frameworks to be eligible for certificates
          </p>
        </div>
      );
    }

    return (
      <div className="space-y-2">
        <h3 className="text-sm font-medium mt-4 mb-2">Eligible for Certification:</h3>
        {completedFrameworks.map(framework => (
          <div key={framework.id} className="flex items-center justify-between p-3 border rounded-lg">
            <div className="flex items-center">
              <Award className="h-5 w-5 mr-2 text-primary" />
              <span>{framework.name}</span>
              {framework.name === "Design Thinking" && (
                <Badge variant="outline" className="ml-2 bg-yellow-50 text-amber-700 border-amber-200">
                  <InfoIcon className="h-3 w-3 mr-1" /> Under Maintenance
                </Badge>
              )}
            </div>
            <Button 
              size="sm" 
              onClick={() => handleIssueCertificate(framework.id)}
              disabled={issuingCertificate === framework.id}
              variant={framework.name === "Design Thinking" ? "outline" : "default"}
            >
              {issuingCertificate === framework.id ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Issuing...
                </>
              ) : (
                <>Issue Certificate</>
              )}
            </Button>
          </div>
        ))}
      </div>
    );
  };

  // Function to manually refresh certificates
  const handleRefresh = async () => {
    toast({
      title: "Refreshing...",
      description: "Updating your certificates and achievements"
    });
    
    // Clear local state of issued certificates
    setLocalNewCertificates([]);
    
    // Invalidate and refetch both certificates and progress data
    await Promise.all([
      queryClient.invalidateQueries({
        queryKey: ['/api/certificates'],
        refetchType: 'all'
      }),
      queryClient.invalidateQueries({
        queryKey: ['/api/user/progress'],
        refetchType: 'all'
      })
    ]);
    
    // Explicitly refetch
    await Promise.all([
      queryClient.refetchQueries({
        queryKey: ['/api/certificates'],
        type: 'all'
      }),
      queryClient.refetchQueries({
        queryKey: ['/api/user/progress'],
        type: 'all'
      })
    ]);
  };
  
  return (
    <div className="container max-w-3xl mx-auto px-4 py-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-primary mb-2">Certificates & Achievements</h1>
          <p className="text-gray-600">Track your learning journey and showcase your expertise</p>
        </div>
        <Button 
          variant="outline" 
          size="sm" 
          onClick={handleRefresh}
          className="flex items-center gap-1"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
            <path d="M21 2v6h-6"></path>
            <path d="M3 12a9 9 0 0 1 15-6.7L21 8"></path>
            <path d="M3 22v-6h6"></path>
            <path d="M21 12a9 9 0 0 1-15 6.7L3 16"></path>
          </svg>
          Refresh
        </Button>
      </div>
      
      <Tabs defaultValue="certificates" onValueChange={setActiveTab}>
        <TabsList className="w-full mb-6">
          <TabsTrigger value="certificates" className="flex-1">
            <FileText className="h-4 w-4 mr-2" />
            Certificates
          </TabsTrigger>
          <TabsTrigger value="achievements" className="flex-1">
            <Trophy className="h-4 w-4 mr-2" />
            Achievements
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="certificates" className="mt-4">
          {/* Example SWOT Certificate - Only show this in demo/development mode */}
          <div className="mb-8 p-4 border rounded-lg bg-gray-50 relative">
            <div className="absolute top-3 right-3">
              <Badge variant="outline">Example</Badge>
            </div>
            <h3 className="text-lg font-semibold mb-2">SWOT Certificate Example</h3>
            <p className="text-sm text-gray-500 mb-4">
              This is an example of how a SWOT framework certificate looks with the certified professional badge.
            </p>
            <SwotCertificateExample />
          </div>

          {renderCertificates()}
          {renderEligibleFrameworks()}
        </TabsContent>
        
        <TabsContent value="achievements" className="mt-4">
          {renderAchievements()}
        </TabsContent>
      </Tabs>
    </div>
  );
}